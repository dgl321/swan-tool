import os
from typing import List, Dict

class BATGenerator:
    """Generator for TOXSWABAT.bat files to run TOXSWA with generated .tpf files."""
    
    def __init__(self, toxswa_path: str = "C:\\SWASH\\TOXSWA\\toxswa_focus_3.exe"):
        """
        Initialize the BAT generator.
        
        Args:
            toxswa_path: Path to the TOXSWA executable
        """
        self.toxswa_path = toxswa_path
        
    def generate_bat_file(self, tpf_files: List[str], output_path: str) -> str:
        """
        Generate a TOXSWABAT.bat file with commands to run each .tpf file.
        
        Args:
            tpf_files: List of paths to .tpf files
            output_path: Path where the .bat file should be saved
            
        Returns:
            Path to the generated .bat file
        """
        if not tpf_files:
            raise ValueError("No .tpf files provided")
            
        # Create the batch file content
        content = self._create_bat_content(tpf_files)
        
        # Write the content to file
        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(content)
            
        return output_path
    
    def _create_bat_content(self, tpf_files: List[str]) -> str:
        """Create the content for the .bat file."""
        lines = [
            "@echo off",
            "REM TOXSWABAT.bat - Generated by SWAN Tool",
            "REM This file runs TOXSWA for all generated .tpf files",
            "",
            f"REM TOXSWA executable path: {self.toxswa_path}",
            "",
            "echo Starting TOXSWA runs...",
            "echo.",
        ]
        
        # Add a command for each .tpf file
        for i, tpf_file in enumerate(tpf_files, 1):
            # Get just the filename without path
            tpf_filename = os.path.basename(tpf_file)
            
            lines.extend([
                f"echo Running TOXSWA for {tpf_filename} ({i}/{len(tpf_files)})",
                f'"{self.toxswa_path}" "{tpf_file}"',
                "",
            ])
            
        # Add completion message
        lines.extend([
            "echo.",
            "echo All TOXSWA runs completed.",
            "pause"
        ])
        
        return '\n'.join(lines)
    
    def generate_bat_from_project_data(self, project_data: List[Dict], output_dir: str) -> str:
        """
        Generate a .bat file based on project data.
        
        Args:
            project_data: List of dictionaries containing project data
            output_dir: Directory where the .bat file should be saved
            
        Returns:
            Path to the generated .bat file
        """
        # Extract .tpf file paths from project data
        tpf_files = []
        for project in project_data:
            tpf_path = project.get('tpf_file_path')
            if tpf_path and os.path.exists(tpf_path):
                tpf_files.append(tpf_path)
                
        if not tpf_files:
            raise ValueError("No valid .tpf files found in project data")
            
        # Generate the .bat file
        bat_path = os.path.join(output_dir, "TOXSWABAT.bat")
        return self.generate_bat_file(tpf_files, bat_path)
    
    def create_individual_bat_files(self, project_data: List[Dict], output_dir: str) -> List[str]:
        """
        Create individual .bat files for each project.
        
        Args:
            project_data: List of dictionaries containing project data
            output_dir: Directory where .bat files should be saved
            
        Returns:
            List of paths to generated .bat files
        """
        bat_files = []
        
        for project in project_data:
            project_name = project.get('project_name', 'unknown')
            tpf_path = project.get('tpf_file_path')
            
            if tpf_path and os.path.exists(tpf_path):
                # Create individual .bat file for this project
                bat_filename = f"{project_name}_TOXSWA.bat"
                bat_path = os.path.join(output_dir, bat_filename)
                
                try:
                    generated_path = self.generate_bat_file([tpf_path], bat_path)
                    bat_files.append(generated_path)
                except Exception as e:
                    print(f"Error generating BAT for project {project_name}: {e}")
                    
        return bat_files 